import telebot
import requests
import sqlite3

from telebot import types
from config import  TOKEN
from keyboard import admins_keyboards,users_keyboards, number_keyboard
from db import check_table


bot = telebot.TeleBot(TOKEN)
check_table()

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite // –ó–ê–ú–ï–ù–ò–¢–¨ –ù–ê –°–í–û–ô // (—Ñ–∞–π–ª –±–¥ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è  –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, 
#—á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å –∫–æ–¥–æ–º)

db_path = "sql.db"

def bot_start():
    try:
        print('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
    except:
        print('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!')


@bot.message_handler(commands=['start'])
def handler_main(message):
    bot.send_message(message.chat.id, "üîé<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–î–∞–≤–∞–π—Ç–µ –≤–æ–π–¥–µ–º –≤ —Å–∏—Å—Ç–µ–º—É</b>üîé",
                     parse_mode='html',
                     reply_markup=number_keyboard())




def entrance(message):
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    reg_button = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    keyboard.add(reg_button)
    bot.send_message(message.chat.id, '–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—Ö–æ–¥–∞.', reply_markup=keyboard)

    bot.register_next_step_handler(message, contact)



@bot.message_handler(content_types=['contact'])
def contact(message):
        user_messages = message.contact.phone_number
        saved_message = user_messages
        if "+" not in saved_message:
               saved_message = "+" + saved_message


        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM sql WHERE phone_number = ? OR work_number = ?",
                       (saved_message, saved_message))  # –∏—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É
        result = cursor.fetchone()
        if result:

            cursor.execute("UPDATE sql SET id_telegramm=? WHERE phone_number=? OR work_number = ?", (message.from_user.id,
                                                                                                     saved_message,
                                                                                                     saved_message))
            conn.commit()
            conn.close()
            keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True)
            reg_button = types.KeyboardButton(text="/main")
            keyboard.add(reg_button)
            bot.send_message(message.chat.id, text=f'–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!', reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–∞—Å –Ω–µ—Ç—É –≤ —Å–∏—Å—Ç–µ–º–µ! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!')




def back_main(call):
   bot.send_message(call.chat.id, "<b>‚ùóÔ∏è–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å‚ùóÔ∏è\n–î–∞–≤–∞–π—Ç–µ –≤–æ–π–¥–µ–º –≤ —Å–∏—Å—Ç–µ–º—Éüîé</b>",
   parse_mode='html',
   reply_markup=number_keyboard())




@bot.message_handler(commands=['main'])
def handler_main(message):
    try:

        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(types.InlineKeyboardButton('–í–æ–π—Ç–∏ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!', callback_data='user_entry'),
           types.InlineKeyboardButton('–í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω!', callback_data='admin_entry'))


        bot.send_message(message.chat.id, "<b>‚ùóÔ∏è–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å‚ùóÔ∏è\n–î–∞–≤–∞–π—Ç–µ –≤–æ–π–¥–µ–º –≤ —Å–∏—Å—Ç–µ–º—Éüîé</b>",
        parse_mode='html',
        reply_markup=markup)



    except TypeError:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–∞—Å –Ω–µ—Ç—É –≤ —Å–∏—Å—Ç–µ–º–µ! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!')




def func_user(call):
    try:
      conn = sqlite3.connect(db_path)
      cursor = conn.cursor()

      cursor.execute(f"SELECT status FROM sql WHERE id_telegramm = '{call.from_user.id}'")
      result = cursor.fetchone()[0]
      if result is not None and str(result) == 'admin':
          bot.send_message(call.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n\nüö®–í—ã –≤–æ—à–ª–∏ —Å —Ä–æ–ª—å—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!üö®',
                               parse_mode='html',
                               reply_markup=admins_keyboards())

      else:
          bot.send_message(call.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—Ö–æ–¥–∞!')
    except TypeError:
      bot.send_message(call.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—Ö–æ–¥–∞!')





def func_admin(call):
    try:
      conn = sqlite3.connect(db_path)
      cursor = conn.cursor()
  
      cursor.execute(f"SELECT status FROM sql WHERE id_telegramm = '{call.from_user.id}'")
      result = cursor.fetchone()[0]
      if result is not None and str(result) == 'user' or str(result) =='admin':
          bot.send_message(call.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüë§–í—ã –≤–æ—à–ª–∏ —Å —Ä–æ–ª—å—é –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!üë§',
                                  parse_mode='html',
                                  reply_markup=users_keyboards())
  
      else:
          bot.send_message(call.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—Ö–æ–¥–∞!')
    except TypeError:
      bot.send_message(call.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—Ö–æ–¥–∞!')


def smeta(message):
    url = 'https://imperial55.ru/webhook/'
    bot.send_message(message.chat.id, '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç –°–º–µ—Ç—ã:\n ')
    bot.send_message(message.chat.id, url)


def add_admin(message):
    bot.send_message(message.chat.id,
                     'üí°–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n ‚ùó‚ùó‚ùó(–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç" –≤ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)‚ùó‚ùó‚ùó')
    bot.register_next_step_handler(message, user_name)

def user_name(message):
    global name
    name = message.text.strip()

    if name.lower() == '–Ω–µ—Ç':
        handler_main(message)
    else:
        bot.register_next_step_handler(message, user_surname)
        bot.send_message(message.chat.id,
                         'üí°–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n ‚ùó‚ùó‚ùó(–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç" –≤ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)‚ùó‚ùó‚ùó')

def user_surname(message):
    global surname
    surname = message.text.strip()
    if surname.lower() == '–Ω–µ—Ç':
        handler_main()
    else:

        bot.send_message(message.chat.id,
                         'üí°–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n‚ùó‚ùó‚ùó(–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç" –≤ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)‚ùó‚ùó‚ùó')
        bot.register_next_step_handler(message, user_number)

def user_number(message):
    global pytrik
    pytrik = message.text.strip()
    if pytrik.lower() == '–Ω–µ—Ç':
        handler_main(message)
    else:

        bot.send_message(message.chat.id,
                         'üí°–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n–ü—Ä–∏–º–µ—Ä: +79456444850\n ‚ùó‚ùó‚ùó(–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç" –≤ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)‚ùó‚ùó‚ùó')
        bot.register_next_step_handler(message, work_number)

def work_number(message):
    global work_numero
    work_numero = message.text.strip()
    if work_numero.lower() == '–Ω–µ—Ç':
        handler_main(message)
    else:

        bot.send_message(message.chat.id,
                         'üí°–í–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n–ü—Ä–∏–º–µ—Ä: +79456444850\n ‚ùó‚ùó‚ùó(–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç" –≤ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)‚ùó‚ùó‚ùó')
        bot.register_next_step_handler(message, completion_admin)

def completion_admin(message):
    global numero
    numero = message.text.strip()
    if numero.lower() == '–Ω–µ—Ç':
        handler_main(message)
    else:

        user_id = message.chat.id
        bot.send_message(message.chat.id, '‚úî–î–æ–±–∞–≤–ª–µ–Ω –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä‚ùó‚ùó‚ùó', reply_markup=admins_keyboards())
        conn = sqlite3.connect('sql.db')
        cur = conn.cursor()
        cur.execute(
            'INSERT INTO sql (name, surname,patronymic, work_number, phone_number, id_telegramm, status) VALUES ("%s", "%s", "%s", "%s", "%s", "%s", "admin")' % (
            name, surname, pytrik, work_numero, numero, user_id, ))
        conn.commit()
        cur.close()
        conn.close()

def ID_user(message):
    bot.send_message(message.chat.id,
                     'üí°–í–≤–µ–¥–∏—Ç–µ ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n ‚ùó‚ùó‚ùó(–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç" –≤ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)‚ùó‚ùó‚ùó')
    bot.register_next_step_handler(message, adduss)




def adduss(message):
    global userID
    userID = message.text.strip()
    if userID.lower() == '–Ω–µ—Ç':
        handler_main(message)
    else:
        bot.send_message(message.chat.id,
                         'üí°–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n ‚ùó‚ùó‚ùó(–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç" –≤ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)‚ùó‚ùó‚ùó')
        bot.register_next_step_handler(message, aser_name)


def aser_name(message):
    global nameUser
    nameUser = message.text.strip()
    if nameUser.lower() == '–Ω–µ—Ç':
        handler_main(message)
    else:
        bot.send_message(message.chat.id,
                         'üí°–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n ‚ùó‚ùó‚ùó(–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç" –≤ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)‚ùó‚ùó‚ùó')
        bot.register_next_step_handler(message, aser_surname)


def aser_surname(message):
    global surnameUser
    surnameUser = message.text.strip()
    if surnameUser.lower() == '–Ω–µ—Ç':
        handler_main(message)
    else:
        bot.send_message(message.chat.id,
                         'üí°–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n ‚ùó‚ùó‚ùó(–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç" –≤ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)‚ùó‚ùó‚ùó')
        bot.register_next_step_handler(message, aser_pytrik)


def aser_pytrik(message):
    global pytrikUser
    pytrikUser = message.text.strip()
    if pytrikUser.lower() == '–Ω–µ—Ç':
        handler_main(message)
    else:
        bot.send_message(message.chat.id,
                         'üí°–í–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n–ü—Ä–∏–º–µ—Ä: +79456444850\n ‚ùó‚ùó‚ùó(–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç" –≤ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)‚ùó‚ùó‚ùó')
        bot.register_next_step_handler(message, work_numerUser)


def work_numerUser(message):
    global work_numeroUser
    work_numeroUser = message.text.strip()
    if work_numeroUser.lower() == '–Ω–µ—Ç':
        handler_main(message)
    else:
        bot.send_message(message.chat.id,
                         'üí°–í–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n–ü—Ä–∏–º–µ—Ä: +79456444850\n ‚ùó‚ùó‚ùó(–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç" –≤ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)‚ùó‚ùó‚ùó')
        bot.register_next_step_handler(message, phone_numerUser)


def phone_numerUser(message):
    try:
        global numeroUser
        numeroUser = message.text.strip()

        if numeroUser.lower() == '–Ω–µ—Ç':
            handler_main(message)

        else:
            status = 'user'
            conn = sqlite3.connect(db_path)
            cur = conn.cursor()
            cur.execute(
                'INSERT INTO sql (ID, name, surname, patronymic, work_number, phone_number, status) VALUES ("%s", "%s", "%s", "%s", "%s", "%s", "%s")' % (userID, nameUser, surnameUser, pytrikUser, work_numeroUser, numeroUser, status))
            conn.commit()
            cur.close()
            conn.close()

            bot.send_message(message.chat.id, '‚úîÔ∏è–î–æ–±–∞–≤–ª–µ–Ω –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è')
            bot.send_message(message.chat.id, text='üîé–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—éüîé', parse_mode='html', reply_markup=admins_keyboards())

    except sqlite3.IntegrityError:
        bot.send_message(message.chat.id, '‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–û–®–ò–ë–ö–ê, –¢–ê–ö–û–ï –ó–ù–ê–ß–ï–ù–ò–ï –£–ñ–ï –°–£–©–ï–°–¢–í–£–ï–¢‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è')



def view_admin(message):

    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    cur.execute('SELECT * FROM sql WHERE status="admin"')
    users = cur.fetchall()

    for el in users:
        bot.send_message(message.chat.id, text=f'üÜî:{el[0]}\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚öñÔ∏è‚öñÔ∏è‚öñÔ∏è\n üîë–ò–º—è:{el[1]}\n üîë–§–∞–º–∏–ª–∏—è:{el[2]}\n üîë–û—Ç—á–µ—Å—Ç–≤–æ:{el[3]}\n üí¨üì†–†–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä:{el[4]}\n üìûüì±–ù–æ–º–µ—Ä:{el[5]}\n\n ‚ûñ‚ûñ‚ûñüíæ‚ûñ‚ûñ‚ûñ\n\n')

    cur.close()
    conn.close()

    bot.send_message(message.chat.id, text='üîé–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—éüîé', parse_mode='html', reply_markup=admins_keyboards())

def viewusers(message):
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    cur.execute('SELECT * FROM sql WHERE status="user"')
    users = cur.fetchall()
    for el in users:
        bot.send_message(message.chat.id,
                         text=f'üÜî:{el[0]}\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚öñÔ∏è‚öñÔ∏è‚öñÔ∏è\n üîë–ò–º—è:{el[1]}\n üîë–§–∞–º–∏–ª–∏—è:{el[2]}\n üîë–û—Ç—á–µ—Å—Ç–≤–æ:{el[3]}\n üí¨üì†–†–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä:{el[4]}\n üìûüì±–ù–æ–º–µ—Ä:{el[5]}\n\n ‚ûñ‚ûñ‚ûñüíæ‚ûñ‚ûñ‚ûñ\n\n')


    cur.close()
    conn.close()
    bot.send_message(message.chat.id, text='üîé–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—éüîé', parse_mode='html', reply_markup=admins_keyboards())




def remove_ad(message):
    view_admin(message)
    bot.send_message(message.chat.id,
                     '–í–≤–µ–¥–∏—Ç–µ id –∞–¥–º–∏–Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: ‚ùó‚ùó‚ùó(–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç" –≤ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)‚ùó‚ùó‚ùó')
    bot.register_next_step_handler(message, rem_adi)

def remove_pl(message):
    viewusers(message)
    bot.send_message(message.chat.id,
                     '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: ‚ùó‚ùó‚ùó(–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç" –≤ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)‚ùó‚ùó‚ùó')
    bot.register_next_step_handler(message, remove_pol)

def rem_adi(message):
    global addminID
    addminID = message.text.strip()
    if addminID.lower() == '–Ω–µ—Ç':
        handler_main(message)
    else:
        conn = sqlite3.connect(db_path)
        cur = conn.cursor()
        cur.execute("DELETE FROM sql WHERE ID=?", (addminID,))
        conn.commit()
        cur.close()
        conn.close()
        bot.send_message(message.chat.id, '‚ùó‚ùó‚ùó–∞–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω‚ùó‚ùó‚ùó', replay_markup=back_main())




def remove_pol(message):
    global polzavID
    polzavID = message.text.strip()
    if polzavID.lower() == '–Ω–µ—Ç':
        handler_main(message)
    else:
        conn = sqlite3.connect(db_path)
        cur = conn.cursor()
        cur.execute("DELETE FROM sql WHERE ID=?", (polzavID,))
        conn.commit()
        cur.close()
        conn.close()
        bot.send_message(message.chat.id, '‚ùó‚ùó‚ùó–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω‚ùó‚ùó‚ùó', reply_markup=admins_keyboards())



def get(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ ID —Å–¥–µ–ª–∫–∏: ')
    bot.register_next_step_handler(message, getIDD)


def getIDD(message):
    conn = sqlite3.connect('sql.db')
    cur = conn.cursor()
    id_tg = message.from_user.id

    #–ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #—Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Å—Ç–∞—Ç—É—Å–æ–º (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º), –µ—Å–ª–∏ –µ—Å—Ç—å
    #–Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:
    sql_query = f"""
    SELECT ID 
    FROM sql 
    WHERE id_telegramm = '{id_tg}' 
    ORDER BY CASE WHEN status = 'admin' THEN 1 ELSE 2 END
    LIMIT 1;
    """

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    cur.execute(sql_query)
    result = cur.fetchone()
    conn.close()
    user_id = result[0]
    print(user_id)

    if result:
        getID = message.text.strip()
        getID.encode('utf-8')
        
        
        url = f"https://imperial55.ru/webhook/dealget.php?ID={getID}&mID={user_id}&close=N"
        print(url)
        
        response = requests.get(url)
        bot.send_message(message.chat.id, '–ó–∞–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞:')
        
        for key in response.text.splitlines():
            a = len(key)  # —Ä–∞–∑–¥–µ–ª–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            if a > 59:
                bot.send_message(message.chat.id, key)
            else:
                bot.send_message(message.chat.id, '–ü—É—Å—Ç–∞—è —Å–¥–µ–ª–∫–∞')
        bot.send_message(message.chat.id, f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=users_keyboards())
        if response.status_code == 200:
            return response.text
        else:
            return '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
    else:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")



def get_close(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ ID —Å–¥–µ–ª–∫–∏: ')
    bot.register_next_step_handler(message, close_get)

def close_get(message):
    conn = sqlite3.connect('sql.db')
    cur = conn.cursor()
    id_tg = message.from_user.id

    #–ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #—Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Å—Ç–∞—Ç—É—Å–æ–º (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º), –µ—Å–ª–∏ –µ—Å—Ç—å
    #–Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:
    sql_query = f"""
    SELECT ID 
    FROM sql 
    WHERE id_telegramm = '{id_tg}' 
    ORDER BY CASE WHEN status = 'admin' THEN 1 ELSE 2 END
    LIMIT 1;
    """

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    cur.execute(sql_query)
    result = cur.fetchone()
    conn.close()
    user_id = result[0]
    print(user_id)

    if result:
        getID = message.text.strip()
        getID.encode('utf-8')
        
        
        url = f"https://imperial55.ru/webhook/dealget.php?ID={getID}&mID={user_id}&close=Y"
        print(url)
        
        response = requests.get(url)
        bot.send_message(message.chat.id, '–ó–∞–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞:')
        
        for key in response.text.splitlines():
            a = len(key)  # —Ä–∞–∑–¥–µ–ª–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            if a > 59:
                bot.send_message(message.chat.id, key)
            else:
                bot.send_message(message.chat.id, '–ü—É—Å—Ç–∞—è —Å–¥–µ–ª–∫–∞')
        bot.send_message(message.chat.id, f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=users_keyboards())
        if response.status_code == 200:
            return response.text
        else:
            return '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
    else:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")


def all_deal(call):
    try:
        conn = sqlite3.connect('sql.db')
        cur = conn.cursor()
        id_tg = call.from_user.id

        #–ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        #—Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Å—Ç–∞—Ç—É—Å–æ–º (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º), –µ—Å–ª–∏ –µ—Å—Ç—å
        #–Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:
        sql_query = f"""
        SELECT ID 
        FROM sql 
        WHERE id_telegramm = '{id_tg}' 
        ORDER BY CASE WHEN status = 'admin' THEN 1 ELSE 2 END
        LIMIT 1;
        """

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        cur.execute(sql_query)
        result = cur.fetchone()
        conn.close()

        if result:
            user_id = result[0]
            print(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Å—Ç–∞—Ç—É—Å–æ–º (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º): {user_id}")
            url = f"https://imperial55.ru/webhook/dealget.php?mID={user_id}&close=N"
            print(url)

            response = requests.get(url)
            response_text = response.content.decode('utf-8')
            bot.send_message(call.from_user.id, '–í—Å–µ  –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏:')
            if response_text:
                bot.send_message(call.from_user.id, response_text)
                bot.send_message(call.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=users_keyboards())

            else:
                bot.send_message(call.from_user.id, '–û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!')
                bot.send_message(call.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=users_keyboards())


        else:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except TypeError as e:
       print(f'–æ—à–∏–±–∫–∞ {e}')




def all_close_deal(call):
    try:
        conn = sqlite3.connect('sql.db')
        cur = conn.cursor()
        id_tg = call.from_user.id

        #–ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        #—Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Å—Ç–∞—Ç—É—Å–æ–º (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º), –µ—Å–ª–∏ –µ—Å—Ç—å
        #–Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:
        sql_query = f"""
        SELECT ID 
        FROM sql 
        WHERE id_telegramm = '{id_tg}' 
        ORDER BY CASE WHEN status = 'admin' THEN 1 ELSE 2 END
        LIMIT 1;
        """


        cur.execute(sql_query)
        result = cur.fetchone()
        conn.close()

        if result:
            user_id = result[0]
            print(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Å—Ç–∞—Ç—É—Å–æ–º (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º): {user_id}")
            url = f"https://imperial55.ru/webhook/dealget.php?mID={user_id}&close=Y"
            print(url)

            response = requests.get(url)
            response_text = response.content.decode('utf-8')
            bot.send_message(call.from_user.id, '–í—Å–µ  –ó–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏:')
            if response_text:
                bot.send_message(call.from_user.id, response_text)
                bot.send_message(call.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=users_keyboards())

            else:
                bot.send_message(call.from_user.id, '–ó–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!')
                bot.send_message(call.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=users_keyboards())


        else:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")



    except TypeError as e:
        print(f'–æ—à–∏–±–∫–∞ {e}')





@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == 'add_admin':
           add_admin(call.message)
    elif call.data == 'add_user':
            ID_user(call.message)
    elif call.data == 'view_users':
           viewusers(call.message)
    elif call.data == 'view_admin':
           view_admin(call.message)
    elif call.data == 'remove_admin':
            remove_ad(call.message)
    elif call.data == 'remove_user':
            remove_pl(call.message)

    elif call.data == 'go_contact':
            entrance(call.message)
    elif call.data == 'ad_back':
            handler_main(call.message)
    elif call.data == 'back_menu':
           back_main(call.message)
    elif call.data == 'vie_del':
           get(call.message)
    elif call.data == 'smeta':
           smeta(call.message)
    elif call.data == 'all_vie_del':
        all_deal(call)
    elif call.data == 'close_vie_del':
           get_close(call.message)
    elif call.data == 'all_close_via_del':
           all_close_deal(call)
    elif call.data == 'admin_entry':
        func_user(call)
    elif call.data == 'user_entry':
        func_admin(call)


if __name__ == '__main__':
  bot.infinity_polling(bot_start())

